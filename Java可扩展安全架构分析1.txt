加密算法要有加密和解密用的密钥

哈希算法是不可逆的，所以也不算是加密
Base64 是编码方式

在对称密码体制中，发送方使用的加密密钥和接收方使用的解密密钥是相同的!
非对称密码体制中，发送方使用的加密密钥和接收方使用的解密密钥是不同的。即，用发送方的加密密钥和接受方的解密密钥的喜爱那个同与否来定义对称密码和非对称密码

HMAC算法摘要
https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0015108777177966ef0f4f8510a41b3b8c48cdcf7047b2d000
HMAC的JAVA实现和应用
https://www.cnblogs.com/fishou/p/4159092.html


算法选择：对称加密AES，非对称加密: ECC，消息摘要: MD5，数字签名:DSA


对称加密算法(加解密密钥相同)
名称													  				                   密钥长度				          运算速度							安全性							资源消耗
DES（Data Encrytion Standard）	                        				                     56位                            较快                      		  低                              中
DESede/3DES（TDEA，Triple Data Encryption Algorithm，三重数据加密算法）                      112位或168位                    慢                        		  中                              高
AES（高级加密标准：Advanced Encryption Standard）                                            128、192、256位                 快                        		  高                              低
		
		
非对称算法(加密密钥和解密密钥不同)		
名称                        							  成熟度                        安全性(取决于密钥长度)    		      运算速度                        资源消耗
RSA（三个人名：Ron Rivest、Adi Shamir、Leonard Adleman）    高                                高                                慢                               高
DSA（Digital Signature Algorithm）                          高                                高                                慢                               只能用于数字签名
ECC（椭圆加密算法）                                         低                                高                                快                               低(计算量小,存储空间占用小,带宽要求低)

散列算法比较
名称                        安全性                        速度
SHA-1                          高                           慢
MD5                            中                           快



对称与非对称算法比较
名称                        密钥管理                       									安全性                            速度
对称算法                    比较难,不适合互联网,一般用于内部系统                              中                              快好几个数量级(软件加解密速度至少快100倍,每秒可以加解密数M比特数据),适合大数据量的加解密处理
非对称算法                  密钥容易管理                                                      高                              慢,适合小数据量加解密或数据签名
                                                                                              

算法选择(从性能和安全性综合)
对称加密: AES(128位),
非对称加密: ECC(160位)或RSA(1024),
消息摘要: MD5
数字签名:DSA
轻量级：TEA、RC系列（RC4），Blowfish （不常换密钥）
速度排名（个人估测，未验证）：IDEA <DES <GASTI28<GOST<AES<RC4<TEA<Blowfish


------------------------------------------------------------------------------------分割线------------------------------------------------------------------------------------

概念：明文、密文、密码、密钥、对称加密、非对称加密、摘要、数字签名、数字证书

密码(cipher)
密码学中的密码（cipher）和我们日常生活中所说的密码不太一样，计算机术语『密码 cipher』是一种用于加密或者解密的算法，而我们日常所使用的『密码 password』是一种口令，它是用于认证用途的一组文本字符串，这里我们要讨论的是前者：cipher。


密钥(key)
密钥是一种参数，它是在使用密码（cipher）算法过程中输入的参数。同一个明文在相同的密码算法和不同的密钥计算下会产生不同的密文。很多知名的密码算法都是公开的，密钥才是决定密文是否安全的重要参数，通常密钥越长，破解的难度越大，比如一个8位的密钥最多有256种情况，使用穷举法，能非常轻易的破解，知名的DES算法使用56位的密钥，目前已经不是一种安全的加密算法了，主要还是因为56位的密钥太短，在数小时内就可以被破解。密钥分为对称密钥与非对称密钥。
密码和明码之间的对应替代关系。如以00，01，02，03代替字母A，B，C，D，那么00译成A，01译成B，02译成C，03译成D就是密钥


明文/密文
明文（plaintext）是加密之前的原始数据，密文是通过密码（cipher）运算后得到的结果成为密文（ciphertext）


对称密钥
对称密钥（Symmetric-key algorithm）又称为共享密钥加密，对称密钥在加密和解密的过程中使用的密钥是相同的，常见的对称加密算法有DES、3DES、AES、RC5、RC6。
对称密钥的优点是计算速度快，但是他也有缺点，密钥需要在通讯的两端共享，让彼此知道密钥是什么对方才能正确解密，如果所有客户端都共享同一个密钥，那么这个密钥就像万能钥匙一样，可以凭借一个密钥破解所有人的密文了，
如果每个客户端与服务端单独维护一个密钥，那么服务端需要管理的密钥将是成千上万，这会给服务端带来噩梦


非对称密钥
非对称密钥（public-key cryptography），又称为公开密钥加密，服务端会生成一对密钥，一个私钥保存在服务端，仅自己知道，另一个是公钥，公钥可以自由发布供任何人使用。
客户端的明文通过公钥加密后的密文需要用私钥解密。非对称密钥在加密和解密的过程的使用的密钥是不同的密钥，加密和解密是不对称的，所以称之为非对称加密。
与对称密钥加密相比，非对称加密无需在客户端和服务端之间共享密钥，只要私钥不发给任何用户，即使公钥在网上被截获，也无法被解密，仅有被窃取的公钥是没有任何用处的。常见的非对称加密有RSA，非对称加解密的过程：

服务端生成配对的公钥和私钥
私钥保存在服务端，公钥发送给客户端
客户端使用公钥加密明文传输给服务端
服务端使用私钥解密密文得到明文


数字签名（Digital Signature）
数据在浏览器和服务器之间传输时，有可能在传输过程中被冒充的盗贼把内容替换了，那么如何保证数据是真实服务器发送的而不被调包呢，同时如何保证传输的数据没有被人篡改呢，
要解决这两个问题就必须用到数字签名，数字签名就如同日常生活的中的签名一样，一旦在合同书上落下了你的大名，从法律意义上就确定是你本人签的字儿，这是任何人都没法仿造的，因为这是你专有的手迹，任何人是造不出来的。
那么在计算机中的数字签名怎么回事呢？数字签名就是用于验证传输的内容是不是真实服务器发送的数据，发送的数据有没有被篡改过，它就干这两件事，是非对称加密的一种应用场景。不过他是反过来用私钥来加密，通过与之配对的公钥来解密。
第一步：服务端把报文经过Hash处理后生成摘要信息Digest，摘要信息使用私钥private-key加密之后就生成签名，服务器把签名连同报文一起发送给客户端。
第二步：客户端接收到数据后，把签名提取出来用public-key解密，如果能正常的解密出来Digest2，那么就能确认是对方发的。
第三步：客户端把报文Text提取出来做同样的Hash处理，得到的摘要信息Digest1，再与之前解密出来的Digist2对比，如果两者相等，就表示内容没有被篡改，否则内容就是被人改过了。
		因为只要文本内容哪怕有任何一点点改动都会Hash出一个完全不一样的摘要信息出来。


数字证书（Certificate Authority）
数字证书简称CA，它由权威机构给某网站颁发的一种认可凭证，这个凭证是被大家（浏览器）所认可的，为什么需要用数字证书呢，难道有了数字签名还不够安全吗？
有这样一种情况，就是浏览器无法确定所有的真实服务器是不是真的是真实的，举一个简单的例子：A厂家给你们家安装锁，同时把钥匙也交给你，只要钥匙能打开锁，你就可以确定钥匙和锁是配对的，
如果有人把钥匙换了或者把锁换了，你是打不开门的，你就知道肯定被窃取了，但是如果有人把锁和钥匙替换成另一套表面看起来差不多的，但质量差很多的，虽然钥匙和锁配套，但是你却不能确定这是否真的是A厂家给你的，
那么这时候，你可以找质检部门来检验一下，这套锁是不是真的来自于A厂家，质检部门是权威机构，他说的话是可以被公众认可的（呵呵）。

同样的， 因为如果有人（张三）用自己的公钥把真实服务器发送给浏览器的公钥替换了，于是张三用自己的私钥执行相同的步骤对文本Hash、数字签名，最后得到的结果都没什么问题，但事实上浏览器看到的东西却不是真实服务器给的，
而是被张三从里到外（公钥到私钥）换了一通。那么如何保证你现在使用的公钥就是真实服务器发给你的呢？我们就用数字证书来解决这个问题。
数字证书一般由数字证书认证机构（Certificate Authority）颁发，证书里面包含了真实服务器的公钥和网站的一些其他信息，数字证书机构用自己的私钥加密后发给浏览器，浏览器使用数字证书机构的公钥解密后得到真实服务器的公钥。
这个过程是建立在被大家所认可的证书机构之上得到的公钥，所以这是一种安全的方式。





------------------------------------------------------------------------------------分割线------------------------------------------------------------------------------------
Session/方案 A ：我发给你一张身份证，但只是一张写着身份证号码的纸片。你每次来办事，我去后台查一下你的 id 是不是有效。 
Token/方案 B ：我发给你一张加密的身份证，以后你只要出示这张卡片，我就知道你一定是自己人。 


https://blog.csdn.net/huangshulang1234/article/details/79840069
cookie的出现：服务器发送给浏览器的，被浏览器保存，当有http请求时，就发送这个cookie给服务器。
		缺陷：客户端就能修改数据，不能存放重要数据，当cookie中的数据字段过多就会影响传输效率。

session的出现：session是放在服务器端的，其运作是通过session_id进行的，session_id在第一次被访问的时候就被存放在cookie中，当你下次访问的时候，cookie带着session_id，服务器就知道你访问过哪里，并将session_id和服务器端的session data关联起来，进行数据保存和修改。

token的出现：令牌，用于验证表明身份的数据或口令数据，可以用post、get、夹在http中的header中。判断你是否已经对该文件授权。token 用在两个地方：一是表单重复提交，二是anti csrf攻击。cookie记录了token和u_id两个字段。

X.509数字证书的结构与解析
https://blog.csdn.net/xy010902100449/article/details/52145009
X.509标准：
	公钥算法
	主题公钥
	此日期前无效
	此日期后无效
	版本号
	序列号
	签名算法
	颁发者
	证书有效期
	主题
	主题公钥信息
	颁发者唯一身份信息（可选项）
	主题唯一身份信息（可选项）
	扩展信息（可选项）
	
CA（Certificate Authority）认证：电子认证服务，由证书签证机关（CA）签发的对用户的公钥的认证。
证书的内容包括：电子签证机关的信息、公钥用户信息、公钥、权威机构的签字和有效期等等。证书的格式和验证方法普遍遵循X.509 国际标准。

数字签名：服务器先用Hash函数，生成内容的摘要（digest），再使用私钥，对这个摘要加密，生成”数字签名”（signature），把数据和签名一起返还给客户端。
客户端拿到数据与签名后，用公钥解密，得到数据摘要，客户端对数据内容进行hash摘要，比对两个摘要校验数据的完整性。



















